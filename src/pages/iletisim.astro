---
// src/pages/iletisim.astro
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Breadcrumbs from '../components/Breadcrumbs.astro';

const baseUrl = 'https://kapi-ureticileri.vercel.app';
const currentUrl = `${baseUrl}${Astro.url.pathname}`;

// ==========================================
// İLETİŞİM BİLGİLERİ
// ==========================================

const contactInfo = {
  phone: {
    display: '+90 544 169 00 38',
    schema: '+90-544-169-0038',
    href: 'tel:+905441690038',
    whatsapp: '905441690038'
  },
  email: {
    primary: 'export@cihanpandoor.com',
    alternative: 'exportcihanpandoor@gmail.com'
  },
  website: 'https://www.cihanpandoor.com',
  address: {
    full: 'Organize Sanayi Bölgesi 29. Sokak No:28, Melikgazi, Kayseri 38070, Turkey',
    street: 'Organize Sanayi Bölgesi 29. Sokak No:28',
    city: 'Kayseri',
    postalCode: '38070'
  },
  coordinates: {
    latitude: 38.713006945276334,
    longitude: 35.32028880684966
  },
  maps: {
    url: 'https://maps.app.goo.gl/XFKFB7tBeBGJ435N9',
    embedUrl: 'https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d49811.34634400007!2d35.32028880684966!3d38.713006945276334!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x152b05342e965841%3A0xfa7a02f50cdebeee!2zQ2loYW5wYW5kb29yIMSww6cgT2RhIEthcMSxc8SxIMSwbWFsYXTEsSB2ZSDEsGhyYWNhdMSx!5e0!3m2!1sen!2str!4v1760624358805!5m2!1sen!2str'
  }
};

const socialLinks = [
  {
    name: 'WhatsApp',
    icon: '📱',
    href: `https://wa.me/${contactInfo.phone.whatsapp}?text=Merhaba, CihanPan Door kapı modelleri hakkında bilgi almak istiyorum.`,
    color: 'bg-emerald-500'
  },
  {
    name: 'Google Maps',
    icon: '📍',
    href: contactInfo.maps.url,
    color: 'bg-red-500'
  },
  {
    name: 'Instagram',
    icon: '📷',
    href: 'https://www.instagram.com/cihanpandoor',
    color: 'bg-pink-500'
  },
  {
    name: 'LinkedIn',
    icon: '💼',
    href: 'https://www.linkedin.com/company/cihanpandoor',
    color: 'bg-blue-600'
  }
];

// ==========================================
// FAQ
// ==========================================

const faqs = [
  {
    question: 'Hangi illere teslimat yapıyorsunuz?',
    answer: 'Türkiye geneline teslimat yapıyoruz. İstanbul, Ankara, İzmir, Bursa, Antalya dahil tüm illere hızlı kargo ile gönderim sağlıyoruz. Büyük projeler için özel nakliye seçenekleri ve uluslararası teslimat imkanlarımız da mevcuttur. Teslimat süreleri bölgeye göre 3-7 iş günü arasında değişmektedir.'
  },
  {
    question: 'Montaj hizmeti veriyor musunuz?',
    answer: 'Evet, tüm Türkiye genelinde profesyonel montaj hizmeti sunuyoruz. Uzman montaj ekibimiz kapı montajını bir günde tamamlar. Montaj hizmeti fiyatları bölgeye ve kapı sayısına göre değişkenlik göstermektedir.'
  },
  {
    question: 'Garanti süreniz ne kadar?',
    answer: 'Tüm PVC, Laminoks ve Elitpan kapı modellerimiz için 5 yıl üretici garantisi veriyoruz. Garanti kapsamına malzeme ve işçilik hataları, renk solması, yüzey bozulmaları dahildir.'
  },
  {
    question: 'Toptan satış yapıyor musunuz?',
    answer: 'Evet, inşaat firmaları, müteahhitler ve bayiler için özel toptan fiyatlarımız bulunmaktadır. Minimum 50 adet siparişlerde özel indirimler uyguluyoruz.'
  },
  {
    question: 'Ödeme seçenekleri nelerdir?',
    answer: 'Kredi kartı, banka havalesi ve kapıda ödeme seçeneklerimiz mevcuttur. Toptan siparişlerde vadeli ödeme planları sunuyoruz.'
  },
  {
    question: 'Özel ölçülerde kapı üretimi yapıyor musunuz?',
    answer: 'Evet, standart ölçülerin dışında özel ölçülerde kapı üretimi yapıyoruz. Maksimum genişlik 120cm, maksimum yükseklik 250cm olabilir. Özel ölçü kapılar için üretim süresi 10-15 iş günüdür.'
  }
];

// ==========================================
// BREADCRUMB
// ==========================================

const breadcrumbItems = [
  { name: "Ana Sayfa", href: "/" },
  { name: "İletişim" }
];

// ==========================================
// SCHEMAS
// ==========================================

const contactPageSchema = {
  "@context": "https://schema.org",
  "@type": "ContactPage",
  "name": "İletişim - CihanPan Door",
  "description": "CihanPan Door ile iletişime geçin. PVC, Laminoks, Elitpan kapı modelleri için fiyat teklifi alın.",
  "url": currentUrl,
  "inLanguage": "tr-TR",
  "mainEntity": {
    "@type": "Organization",
    "name": "CihanPan Door",
    "url": baseUrl,
    "logo": `${baseUrl}/assets/images/logo/header_logo1.webp`,
    "contactPoint": [
      {
        "@type": "ContactPoint",
        "telephone": contactInfo.phone.schema,
        "contactType": "Sales",
        "email": contactInfo.email.primary,
        "areaServed": ["TR", "EU", "ME"],
        "availableLanguage": ["Turkish", "English", "German", "Arabic"]
      }
    ],
    "address": {
      "@type": "PostalAddress",
      "streetAddress": contactInfo.address.street,
      "addressLocality": contactInfo.address.city,
      "postalCode": contactInfo.address.postalCode,
      "addressCountry": "TR"
    },
    "geo": {
      "@type": "GeoCoordinates",
      "latitude": contactInfo.coordinates.latitude,
      "longitude": contactInfo.coordinates.longitude
    },
    "hasMap": contactInfo.maps.url
  }
};

const localBusinessSchema = {
  "@context": "https://schema.org",
  "@type": "LocalBusiness",
  "name": "CihanPan Door",
  "image": `${baseUrl}/assets/images/logo/header_logo1.webp`,
  "url": baseUrl,
  "telephone": contactInfo.phone.schema,
  "email": contactInfo.email.primary,
  "priceRange": "$$",
  "address": {
    "@type": "PostalAddress",
    "streetAddress": contactInfo.address.street,
    "addressLocality": contactInfo.address.city,
    "postalCode": contactInfo.address.postalCode,
    "addressCountry": "TR"
  },
  "geo": {
    "@type": "GeoCoordinates",
    "latitude": contactInfo.coordinates.latitude,
    "longitude": contactInfo.coordinates.longitude
  },
  "hasMap": contactInfo.maps.url,
  "openingHoursSpecification": [
    {
      "@type": "OpeningHoursSpecification",
      "dayOfWeek": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      "opens": "08:00",
      "closes": "18:00"
    }
  ],
  "aggregateRating": {
    "@type": "AggregateRating",
    "ratingValue": "4.8",
    "reviewCount": "152"
  }
};

const faqSchema = {
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "mainEntity": faqs.map(faq => ({
    "@type": "Question",
    "name": faq.question,
    "acceptedAnswer": {
      "@type": "Answer",
      "text": faq.answer
    }
  }))
};

const breadcrumbSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": breadcrumbItems.map((item, index) => ({
    "@type": "ListItem",
    "position": index + 1,
    "name": item.name,
    "item": item.href ? `${baseUrl}${item.href}` : currentUrl
  }))
};

const publicWeb3formsKey = import.meta.env.PUBLIC_WEB3FORMS_KEY;
---

<Layout
  title="İletişim - CihanPan Door | Kapı Fiyat Teklifi ☎️ +90 544 169 00 38"
  description="CihanPan Door Kayseri. PVC, Laminoks, Elitpan kapı modelleri için ücretsiz fiyat teklifi alın. Türkiye geneline teslimat ve montaj hizmeti."
  keywords="cihanpan door iletişim, kayseri kapı üreticisi, pvc kapı fiyat teklifi, toptan kapı satışı"
  canonical={currentUrl}
  ogImage="/assets/img/og/iletisim-og.webp"
  ogType="website"
  schema={[contactPageSchema, localBusinessSchema, faqSchema, breadcrumbSchema]}
>
  <Header />
  <Breadcrumbs items={breadcrumbItems} />

  <main>
    <!-- Hero Section -->
    <section class="hero">
      <div class="container">
        <h1 class="hero-title">İletişime Geçin</h1>
        <p class="hero-subtitle">
          Kapı modelleri hakkında detaylı bilgi almak ve ücretsiz fiyat teklifi için bizimle iletişime geçin.
        </p>
      </div>
    </section>

    <!-- Contact Info Cards -->
    <section class="contact-section">
      <div class="container">
        <div class="contact-grid">

          <!-- Telefon -->
          <div class="contact-card">
            <div class="icon">📞</div>
            <h3>Telefon</h3>
            <a href={contactInfo.phone.href} class="contact-link">
              {contactInfo.phone.display}
            </a>
            <p class="text-sm">Pazartesi - Cumartesi: 08:00 - 18:00</p>
          </div>

          <!-- WhatsApp -->
          <div class="contact-card">
            <div class="icon">💬</div>
            <h3>WhatsApp</h3>
            <a href={socialLinks[0].href} target="_blank" rel="noopener" class="contact-link">
              Mesaj Gönder
            </a>
            <p class="text-sm">7/24 Mesaj Atabilirsiniz</p>
          </div>

          <!-- Email -->
          <div class="contact-card">
            <div class="icon">✉️</div>
            <h3>Email</h3>
            <a href={`mailto:${contactInfo.email.primary}`} class="contact-link">
              {contactInfo.email.primary}
            </a>
            <p class="text-sm">24 saat içinde yanıt</p>
          </div>

          <!-- Adres -->
          <div class="contact-card">
            <div class="icon">📍</div>
            <h3>Adres</h3>
            <address style="font-style: normal;">
              {contactInfo.address.street}<br/>
              {contactInfo.address.city} {contactInfo.address.postalCode}
            </address>
            <a href={contactInfo.maps.url} target="_blank" rel="noopener" class="contact-link">
              Haritada Gör →
            </a>
          </div>

        </div>
      </div>
    </section>

   <!-- Contact Form -->
    <section class="form-section">
      <div class="container">
        <div class="form-wrapper">
          <div class="form-header">
            <h2>Ücretsiz Fiyat Teklifi Alın</h2>
            <p>Formu doldurun, en kısa sürede size dönelim.</p>
          </div>

          <form id="contactForm" action="https://api.web3forms.com/submit" method="POST" class="contact-form">
            <input type="hidden" name="access_key" value={publicWeb3formsKey} />
            <input type="hidden" name="subject" value="Yeni İletişim Formu - CihanPan Door" />
            <input type="hidden" name="from_name" value="CihanPan Door Website" />
            <input type="text" name="honeypot" style="display:none" />

            <div class="form-row">
              <div class="form-group">
                <label for="name">Ad Soyad *</label>
                <input type="text" id="name" name="name" required placeholder="Adınız Soyadınız" aria-invalid="false" />
                <span id="name-error" class="error-message"></span>
              </div>

              <div class="form-group">
                <label for="email">Email *</label>
                <input type="email" id="email" name="email" required placeholder="ornek@email.com" aria-invalid="false" />
                <span id="email-error" class="error-message"></span>
              </div>
            </div>

            <div class="form-row">
              <div class="form-group">
                <label for="phone">Telefon *</label>
                <input type="tel" id="phone" name="phone" required placeholder="+90 5XX XXX XX XX" aria-invalid="false" />
                <span id="phone-error" class="error-message"></span>
              </div>

              <div class="form-group">
                <label for="company">Firma Adı</label>
                <input type="text" id="company" name="company" placeholder="Firma Adınız (Opsiyonel)" />
              </div>
            </div>

            <div class="form-group">
              <label for="product">Ürün İlgi Alanı</label>
              <select id="product" name="product">
                <option value="">Seçiniz</option>
                <option value="pvc">PVC Kapılar</option>
                <option value="laminoks">Laminoks Kapılar</option>
                <option value="elitpan">Elitpan Kapılar</option>
                <option value="hastane">Hastane Kapıları</option>
                <option value="otel">Otel Kapıları</option>
                <option value="yangin">Yangına Dayanıklı Kapılar</option>
                <option value="diger">Diğer</option>
              </select>
            </div>

            <div class="form-group">
              <label for="message">Mesajınız *</label>
              <textarea id="message" name="message" required rows="5" placeholder="Proje detaylarınızı, kapı adedi, teslimat yeri gibi bilgileri paylaşın..." aria-invalid="false"></textarea>
              <span id="message-error" class="error-message"></span>
            </div>

            <button type="submit" class="btn-submit">
              <span class="btn-text">Teklif İsteyin</span>
            </button>
          </form>
        </div>
      </div>
    </section>

    <!-- Google Maps -->
    <section class="map-section">
      <div class="container">
        <h2>Bizi Ziyaret Edin</h2>
        <div class="map-wrapper">
          <iframe
            src={contactInfo.maps.embedUrl}
            width="100%"
            height="450"
            style="border:0;"
            allowfullscreen=""
            loading="lazy"
            referrerpolicy="no-referrer-when-downgrade"
            title="CihanPan Door Kayseri Organize Sanayi Konumu"
          ></iframe>
        </div>
        <div class="map-actions">
          <a href={contactInfo.maps.url} target="_blank" rel="noopener noreferrer" class="btn btn-primary">
            📍 Google Maps'te Aç
          </a>
          <a href={`https://www.google.com/maps/dir//${contactInfo.coordinates.latitude},${contactInfo.coordinates.longitude}`}
             target="_blank"
             rel="noopener noreferrer"
             class="btn btn-secondary">
            🧭 Yol Tarifi Al
          </a>
        </div>
      </div>
    </section>

    <!-- FAQ Section -->
    <section class="faq-section">
      <div class="container">
        <h2>Sık Sorulan Sorular</h2>
        <div class="faq-list">
          {faqs.map((faq) => (
            <details class="faq-item">
              <summary>{faq.question}</summary>
              <p>{faq.answer}</p>
            </details>
          ))}
        </div>
      </div>
    </section>

    <!-- Social Links -->
    <section class="social-section">
      <div class="container">
        <h2>Sosyal Medyada Bizi Takip Edin</h2>
        <div class="social-grid">
          {socialLinks.map((link) => (
            <a href={link.href} target="_blank" rel="noopener noreferrer" class={`social-card ${link.color}`}>
              <span class="social-icon">{link.icon}</span>
              <span class="social-name">{link.name}</span>
            </a>
          ))}
        </div>
      </div>
    </section>

  </main>

  <Footer />
</Layout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .hero {
    padding: 4rem 0;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    text-align: center;
  }

  .hero-title {
    font-size: clamp(2rem, 4vw, 3.5rem);
    font-weight: 800;
    margin-bottom: 1rem;
  }

  .hero-subtitle {
    font-size: clamp(1rem, 2vw, 1.25rem);
    opacity: 0.95;
    max-width: 600px;
    margin: 0 auto;
  }

  .contact-section {
    padding: 5rem 0;
    background: #f8fafc;
  }

  .contact-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
  }

  .contact-card {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    text-align: center;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    transition: transform 0.3s ease;
  }

  .contact-card:hover {
    transform: translateY(-5px);
  }

  .icon {
    font-size: 3rem;
    margin-bottom: 1rem;
  }

  .contact-card h3 {
    font-size: 1.5rem;
    color: #1a202c;
    margin-bottom: 1rem;
  }

  .contact-link {
    color: #667eea;
    text-decoration: none;
    font-weight: 600;
    font-size: 1.1rem;
    display: block;
    margin-bottom: 0.5rem;
  }

  .contact-link:hover {
    text-decoration: underline;
  }

  .text-sm {
    color: #6b7280;
    font-size: 0.9rem;
  }

  .form-section {
    padding: 5rem 0;
    background: white;
  }

  .form-wrapper {
    max-width: 800px;
    margin: 0 auto;
    background: #f8fafc;
    padding: 3rem;
    border-radius: 12px;
  }

  .form-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .form-header h2 {
    font-size: 2.5rem;
    color: #1a202c;
    margin-bottom: 1rem;
  }

  .form-header p {
    color: #6b7280;
    font-size: 1.1rem;
  }

  .contact-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
  }

  .form-group label {
    color: #1a202c;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    padding: 1rem;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
  }

  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: #667eea;
  }

  .btn-submit {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1rem 3rem;
    border: none;
    border-radius: 8px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: transform 0.3s ease;
  }

  .btn-submit:hover {
    transform: translateY(-2px);
  }

  .map-section {
    padding: 5rem 0;
    background: #f8fafc;
  }

  .map-section h2 {
    text-align: center;
    font-size: 2.5rem;
    color: #1a202c;
    margin-bottom: 3rem;
  }

  .map-wrapper {
    border-radius: 12px;
    overflow: hidden;
    margin-bottom: 2rem;
  }

  .map-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .btn {
    padding: 1rem 2rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .btn-primary {
    background: #667eea;
    color: white;
  }

  .btn-primary:hover {
    background: #5a67d8;
  }

  .btn-secondary {
    background: white;
    color: #667eea;
    border: 2px solid #667eea;
  }

  .btn-secondary:hover {
    background: #667eea;
    color: white;
  }

  .faq-section {
    padding: 5rem 0;
    background: white;
  }

  .faq-section h2 {
    text-align: center;
    font-size: 2.5rem;
    color: #1a202c;
    margin-bottom: 3rem;
  }

  .faq-list {
    max-width: 800px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .faq-item {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    overflow: hidden;
  }

  .faq-item summary {
    padding: 1.5rem;
    cursor: pointer;
    font-weight: 600;
    color: #1a202c;
    list-style: none;
  }

  .faq-item summary::after {
    content: "+";
    float: right;
    font-size: 1.5rem;
    color: #667eea;
  }

  .faq-item[open] summary::after {
    content: "−";
  }

  .faq-item p {
    padding: 0 1.5rem 1.5rem;
    color: #4a5568;
    line-height: 1.6;
  }

  .social-section {
    padding: 5rem 0;
    background: #f8fafc;
  }

  .social-section h2 {
    text-align: center;
    font-size: 2.5rem;
    color: #1a202c;
    margin-bottom: 3rem;
  }

  .social-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    max-width: 800px;
    margin: 0 auto;
  }

  .social-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 2rem;
    border-radius: 12px;
    color: white;
    text-decoration: none;
    transition: transform 0.3s ease;
  }

  .social-card:hover {
    transform: translateY(-5px);
  }

  .social-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
  }

  .social-name {
    font-weight: 600;
    font-size: 1.1rem;
  }

  .bg-emerald-500 { background: #10b981; }
  .bg-red-500 { background: #ef4444; }
  .bg-pink-500 { background: #ec4899; }
  .bg-blue-600 { background: #2563eb; }

  @media (max-width: 768px) {
    .form-wrapper {
      padding: 2rem 1.5rem;
    }

    .form-row {
      grid-template-columns: 1fr;
    }

    .map-actions {
      flex-direction: column;
    }

    .btn {
      width: 100%;
      text-align: center;
    }
  }
</style>




<style>
  .hero-section {
    background: linear-gradient(135deg, #1e40af 0%, #3730a3 100%);
    color: white;
    padding: 6rem 0 3rem;
  }

  .hero-title {
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .hero-subtitle {
    font-size: 1.125rem;
    opacity: 0.9;
    max-width: 500px;
    margin: 0 auto;
  }

  .contact-section {
    padding: 4rem 0;
  }

  .contact-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 3rem;
    margin-bottom: 4rem;
  }

  .form-container {
    background: white;
    padding: 2.5rem;
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    border: 1px solid #e5e7eb;
    transition: opacity 0.3s ease;
  }

  .form-container.submitting {
    opacity: 0.6;
    pointer-events: none;
  }

  .form-header {
    margin-bottom: 2rem;
  }

  .section-title {
    font-size: 1.875rem;
    font-weight: 700;
    color: #111827;
    margin-bottom: 0.5rem;
  }

  .section-subtitle {
    color: #6b7280;
    font-size: 1rem;
  }

  .form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-label {
    display: block;
    font-weight: 500;
    color: #374151;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
  }

  .form-input, .form-select, .form-textarea {
    width: 100%;
    padding: 0.875rem 1rem;
    border: 1px solid #d1d5db;
    border-radius: 8px;
    font-size: 0.875rem;
    transition: all 0.2s ease;
    background: #fafafa;
  }

  .form-input:focus, .form-select:focus, .form-textarea:focus {
    outline: none;
    border-color: #3b82f6;
    background: white;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .form-input.error, .form-select.error, .form-textarea.error {
    border-color: #ef4444;
    background: #fef2f2;
  }

  .form-input[aria-invalid="true"], .form-select[aria-invalid="true"], .form-textarea[aria-invalid="true"] {
    border-color: #ef4444;
  }

  .form-textarea {
    resize: vertical;
    min-height: 100px;
  }

  .submit-btn {
    width: 100%;
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    color: white;
    border: none;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .submit-btn:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3);
  }

  .submit-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .submit-btn:focus-visible {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  .info-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .contact-cards {
    display: grid;
    gap: 1.25rem;
  }

  .contact-card {
    background: white;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
    border: 1px solid #e5e7eb;
    transition: all 0.2s ease;
  }

  .contact-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
  }

  .card-title {
    font-size: 1rem;
    font-weight: 600;
    color: #111827;
    margin-bottom: 0.25rem;
  }

  .card-text {
    color: #6b7280;
    margin-bottom: 0.75rem;
    font-size: 0.875rem;
    line-height: 1.5;
  }

  .working-hours {
    white-space: pre-line;
    font-size: 0.8125rem;
  }

  .card-link {
    color: #3b82f6;
    text-decoration: none;
    font-weight: 500;
    font-size: 0.8125rem;
    transition: color 0.2s ease;
  }

  .card-link:hover {
    color: #1d4ed8;
  }

  .card-link:focus-visible {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
    border-radius: 4px;
  }

  .whatsapp-cta {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    padding: 2rem;
    border-radius: 12px;
    color: white;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1.5rem;
  }

  .whatsapp-content {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .whatsapp-icon {
    background: rgba(255, 255, 255, 0.2);
    padding: 1rem;
    border-radius: 50%;
  }

  .whatsapp-title {
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: 0.25rem;
  }

  .whatsapp-text {
    opacity: 0.9;
    font-size: 0.875rem;
  }

  .whatsapp-btn {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 500;
    font-size: 0.875rem;
    transition: all 0.2s ease;
    white-space: nowrap;
    border: 1px solid rgba(255, 255, 255, 0.3);
  }

  .whatsapp-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
  }

  .whatsapp-btn:focus-visible {
    outline: 2px solid white;
    outline-offset: 2px;
  }

  .social-section {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
    border: 1px solid #e5e7eb;
  }

  .social-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #111827;
    margin-bottom: 1rem;
  }

  .social-links {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 0.75rem;
  }

  .social-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    border-radius: 8px;
    text-decoration: none;
    color: white;
    font-weight: 500;
    font-size: 0.8125rem;
    transition: all 0.2s ease;
  }

  .social-link:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }

  .social-link:focus-visible {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }

  .bg-emerald-500 { background: #10b981; }
  .bg-pink-500 { background: #ec4899; }
  .bg-blue-600 { background: #2563eb; }

  .faq-section {
    margin-top: 3rem;
  }

  .faq-header {
    margin-bottom: 2rem;
  }

  .faq-container {
    max-width: 768px;
    margin: 0 auto;
    display: grid;
    gap: 0.75rem;
  }

  .faq-item {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    border: 1px solid #e5e7eb;
    transition: all 0.2s ease;
  }

  .faq-item.active {
    box-shadow: 0 4px 20px rgba(59, 130, 246, 0.15);
    border-color: #3b82f6;
  }

  .faq-question {
    width: 100%;
    padding: 1.25rem 1.5rem;
    background: none;
    border: none;
    text-align: left;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.9375rem;
    font-weight: 500;
    color: #111827;
    transition: all 0.2s ease;
  }

  .faq-question:hover {
    background: #f9fafb;
  }

  .faq-question:focus-visible {
    outline: 2px solid #3b82f6;
    outline-offset: -2px;
  }

  .question-icon {
    width: 1.25rem;
    height: 1.25rem;
    color: #6b7280;
    transition: transform 0.2s ease;
    flex-shrink: 0;
  }

  .faq-item.active .question-icon {
    transform: rotate(45deg);
    color: #3b82f6;
  }

  .faq-answer {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
  }

  .faq-item.active .faq-answer {
    max-height: 200px;
  }

  .answer-text {
    padding: 0 1.5rem 1.5rem;
    color: #6b7280;
    line-height: 1.6;
    font-size: 0.875rem;
  }

  .notification {
    position: fixed;
    top: 2rem;
    right: 2rem;
    padding: 1.5rem 2rem;
    border-radius: 12px;
    box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);
    z-index: 99999;
    transform: translateX(120%);
    transition: transform 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    max-width: 400px;
    min-width: 320px;
  }

  .notification.show {
    transform: translateX(0);
  }

  .notification.success {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: white;
  }

  .notification.error {
    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
    color: white;
  }

  .notification.info {
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    color: white;
  }

  .notification-content {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    position: relative;
  }

  .notification-icon {
    width: 1.75rem;
    height: 1.75rem;
    flex-shrink: 0;
    margin-top: 0.125rem;
  }

  .notification-close {
    position: absolute;
    top: -0.5rem;
    right: -0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border: none;
    color: white;
    width: 2rem;
    height: 2rem;
    border-radius: 50%;
    cursor: pointer;
    font-size: 1.125rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    font-weight: bold;
  }

  .notification-close:hover {
    background: rgba(0, 0, 0, 0.3);
    transform: scale(1.1);
  }

  .notification-title {
    font-weight: 700;
    margin-bottom: 0.375rem;
    font-size: 1.0625rem;
  }

  .notification-text {
    font-size: 0.9375rem;
    opacity: 0.95;
    line-height: 1.4;
  }

  .error-message {
    display: block;
    color: #ef4444;
    font-size: 0.75rem;
    margin-top: 0.25rem;
    min-height: 1rem;
  }

  .faq-question[aria-expanded="true"] {
    background: #f9fafb;
  }

  @media (min-width: 768px) {
    .contact-grid {
      grid-template-columns: 1.2fr 1fr;
      gap: 4rem;
    }
  }

  @media (max-width: 768px) {
    .hero-title {
      font-size: 2.25rem;
    }

    .form-container {
      padding: 1.5rem;
    }

    .form-grid {
      grid-template-columns: 1fr;
      gap: 0;
    }

    .contact-card {
      padding: 1.25rem;
    }

    .whatsapp-cta {
      flex-direction: column;
      text-align: center;
    }

    .whatsapp-content {
      justify-content: center;
    }

    .social-links {
      grid-template-columns: 1fr;
    }

    .notification {
      top: 1rem;
      right: 1rem;
      left: 1rem;
      max-width: none;
      min-width: auto;
    }
  }

  @media (max-width: 480px) {
    .hero-section {
      padding: 4rem 0 2rem;
    }

    .contact-section {
      padding: 2rem 0;
    }

    .form-container,
    .social-section {
      padding: 1.25rem;
    }

    .notification {
      top: 0.5rem;
      right: 0.5rem;
      left: 0.5rem;
      padding: 1rem 1.25rem;
    }

    .notification-title {
      font-size: 0.9375rem;
    }

    .notification-text {
      font-size: 0.8125rem;
    }
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  .hidden { display: none; }
  .text-center { text-align: center; }
</style>

<script is:inline define:vars={{ publicWeb3formsKey }}>
  console.log('🔵 Script loaded!');
  console.log('🔵 Access Key:', publicWeb3formsKey ? 'EXISTS' : 'MISSING');

  window.addEventListener('load', function() {
    console.log('🟢 Page loaded!');

    const contactForm = document.getElementById('contactForm');
    console.log('🟢 Form element:', contactForm ? 'FOUND' : 'NOT FOUND');

    if (!contactForm) {
      alert('HATA: Form bulunamadı!');
      return;
    }

    const accessKey = publicWeb3formsKey;

    if (!accessKey) {
      console.error('❌ Web3Forms access key is not configured');
      alert('HATA: Web3Forms API key tanımlı değil!');
      return;
    }

    console.log('✅ Access key configured');

    // Form submission state
    let isSubmitting = false;
    let lastSubmitTime = 0;
    const SUBMIT_COOLDOWN = 3000;

    // Validation functions
    function isValidEmail(email) {
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }

    function isValidPhone(phone) {
      const cleaned = phone.replace(/\D/g, '');
      return !phone || cleaned.length >= 10;
    }

    function isValidName(name) {
      return name.trim().length >= 2;
    }

    function isValidMessage(message) {
      return message.trim().length >= 10;
    }

    // Show error message
    function showError(field, message) {
      const errorSpan = document.getElementById(`${field.id}-error`);
      if (errorSpan) {
        errorSpan.textContent = message;
        field.setAttribute('aria-invalid', 'true');
        field.classList.add('error');
      }
    }

    // Clear error message
    function clearError(field) {
      const errorSpan = document.getElementById(`${field.id}-error`);
      if (errorSpan) {
        errorSpan.textContent = '';
        field.setAttribute('aria-invalid', 'false');
        field.classList.remove('error');
      }
    }

    // Validate field
    function validateField(field) {
      clearError(field);

      if (field.hasAttribute('required') && !field.value.trim()) {
        showError(field, 'Bu alan zorunludur.');
        return false;
      }

      if (field.type === 'email' && field.value) {
        if (!isValidEmail(field.value)) {
          showError(field, 'Geçerli bir e-posta adresi girin.');
          return false;
        }
      }

      if (field.type === 'tel' && field.value) {
        if (!isValidPhone(field.value)) {
          showError(field, 'Geçerli bir telefon numarası girin (en az 10 rakam).');
          return false;
        }
      }

      if (field.id === 'name' && field.value) {
        if (!isValidName(field.value)) {
          showError(field, 'Adınız en az 2 karakter olmalıdır.');
          return false;
        }
      }

      if (field.id === 'message' && field.value) {
        if (!isValidMessage(field.value)) {
          showError(field, 'Mesajınız en az 10 karakter olmalıdır.');
          return false;
        }
      }

      return true;
    }

    // Set button loading state
    function setButtonLoading(button, isLoading) {
      const btnText = button.querySelector('.btn-text');
      if (isLoading) {
        button.dataset.originalText = btnText.textContent;
        btnText.innerHTML = `
          <svg class="animate-spin inline-block mr-2" width="16" height="16" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Gönderiliyor...
        `;
        button.disabled = true;
      } else {
        btnText.textContent = button.dataset.originalText || 'Mesaj Gönder';
        button.disabled = false;
      }
    }

function showNotification(type, title, text) {
  console.log('📢 Showing notification:', type, title, text);

  const oldNotif = document.getElementById('customNotification');
  if (oldNotif) oldNotif.remove();

  const notif = document.createElement('div');
  notif.id = 'customNotification';
  notif.style.cssText = `position: fixed; top: 20px; right: 20px; min-width: 350px; max-width: 450px; background: white; border-radius: 12px; box-shadow: 0 20px 60px rgba(0,0,0,0.3); z-index: 999999; animation: slideIn 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55); overflow: hidden;`;

  let bgColor = type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6';
  let icon = type === 'success' ? '✓' : type === 'error' ? '✕' : 'ℹ';

  notif.innerHTML = `<style>@keyframes slideIn{from{transform:translateX(120%);opacity:0}to{transform:translateX(0);opacity:1}}@keyframes slideOut{from{transform:translateX(0);opacity:1}to{transform:translateX(120%);opacity:0}}@keyframes progressBar{from{width:100%}to{width:0%}}@media(max-width:768px){#customNotification{top:10px!important;right:10px!important;left:10px!important;min-width:auto!important;max-width:none!important}}</style><div style="display:flex;align-items:flex-start;padding:20px;gap:15px"><div style="width:48px;height:48px;border-radius:50%;background:${bgColor};display:flex;align-items:center;justify-content:center;font-size:24px;font-weight:bold;color:white;flex-shrink:0">${icon}</div><div style="flex:1;padding-top:4px"><div style="font-size:17px;font-weight:700;color:#111827;margin-bottom:6px">${title}</div><div style="font-size:14px;color:#6b7280;line-height:1.5">${text}</div></div><button onclick="this.closest('#customNotification').remove()" style="background:transparent;border:none;color:#9ca3af;font-size:28px;cursor:pointer;padding:0;width:32px;height:32px;display:flex;align-items:center;justify-content:center;border-radius:6px;transition:all 0.2s;line-height:1;margin-top:-4px" onmouseover="this.style.background='#f3f4f6';this.style.color='#374151'" onmouseout="this.style.background='transparent';this.style.color='#9ca3af'">&times;</button></div><div style="height:4px;background:#e5e7eb;position:relative;overflow:hidden"><div style="height:100%;background:${bgColor};animation:progressBar 5s linear forwards"></div></div>`;

  document.body.appendChild(notif);

  setTimeout(() => {
    if (notif && notif.parentNode) {
      notif.style.animation = 'slideOut 0.3s ease forwards';
      setTimeout(() => notif.remove(), 300);
    }
  }, 5000);
}

    // FAQ Accordion
    const faqItems = document.querySelectorAll('.faq-item');
    faqItems.forEach(function(item, index) {
      const question = item.querySelector('.faq-question');

      if (question) {
        question.addEventListener('click', function() {
          const isActive = item.classList.contains('active');

          faqItems.forEach(function(faq) {
            faq.classList.remove('active');
            const btn = faq.querySelector('.faq-question');
            if (btn) btn.setAttribute('aria-expanded', 'false');
          });

          if (!isActive) {
            item.classList.add('active');
            question.setAttribute('aria-expanded', 'true');
          }
        });

        question.addEventListener('keydown', function(e) {
          let targetIndex;

          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            question.click();
          } else if (e.key === 'ArrowDown') {
            e.preventDefault();
            targetIndex = (index + 1) % faqItems.length;
          } else if (e.key === 'ArrowUp') {
            e.preventDefault();
            targetIndex = (index - 1 + faqItems.length) % faqItems.length;
          } else if (e.key === 'Home') {
            e.preventDefault();
            targetIndex = 0;
          } else if (e.key === 'End') {
            e.preventDefault();
            targetIndex = faqItems.length - 1;
          }

          if (targetIndex !== undefined) {
            const targetBtn = faqItems[targetIndex].querySelector('.faq-question');
            if (targetBtn) targetBtn.focus();
          }
        });
      }
    });

    // Form handling
    console.log('🟢 Setting up form listener...');

    contactForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      e.stopPropagation();


      console.log('=== FORM SUBMIT STARTED ===');
      console.log('Access Key:', accessKey ? 'EXISTS' : 'MISSING');

      if (!accessKey) {
        console.error('Access key is missing!');
        showNotification('error', 'Yapılandırma Hatası', 'Form gönderimi yapılandırılmamış. Lütfen site yöneticisiyle iletişime geçin.');
        return;
      }

      // Check rate limiting
      const now = Date.now();
      console.log('Rate limit check:', { now, lastSubmitTime, cooldown: SUBMIT_COOLDOWN, timeSince: now - lastSubmitTime });

      if (now - lastSubmitTime < SUBMIT_COOLDOWN) {
        console.warn('Rate limit exceeded');
        showNotification('error', 'Çok Hızlı!', 'Lütfen birkaç saniye bekleyip tekrar deneyin.');
        return;
      }

      // Check if already submitting
      console.log('Is submitting:', isSubmitting);
      if (isSubmitting) {
        console.warn('Already submitting, ignoring...');
        return;
      }

      // Validate all fields
      console.log('Starting validation...');
      let isValid = true;
      const fields = contactForm.querySelectorAll('input, textarea, select');
      fields.forEach(field => {
        if (field.name !== 'honeypot') {
          const valid = validateField(field);
          console.log(`Field ${field.name}: ${valid ? 'VALID' : 'INVALID'}`);
          if (!valid) isValid = false;
        }
      });

      console.log('Overall validation:', isValid ? 'PASSED' : 'FAILED');

      if (!isValid) {
        showNotification('error', 'Form Hatası', 'Lütfen tüm zorunlu alanları doğru şekilde doldurun.');
        return;
      }

      // Check honeypot
      const honeypot = contactForm.querySelector('input[name="honeypot"]');
      if (honeypot && honeypot.value) {
        console.log('Bot detected via honeypot');
        showNotification('error', 'Hata', 'Form gönderilemedi. Lütfen sayfayı yenileyip tekrar deneyin.');
        return;
      }

      console.log('All checks passed, preparing to submit...');

      const submitBtn = contactForm.querySelector('.submit-btn');
      const formContainer = document.querySelector('.form-container');

      isSubmitting = true;
      lastSubmitTime = now;
      setButtonLoading(submitBtn, true);
      formContainer.classList.add('submitting');

      console.log('UI updated, starting API call...');

      try {
        const formData = new FormData(contactForm);
        const data = {
          access_key: accessKey,
          name: formData.get('name'),
          email: formData.get('email'),
          phone: formData.get('phone') || 'Belirtilmedi',
          subject: formData.get('subject'),
          message: formData.get('message'),
          from_name: 'CihanPan Door Iletisim Formu',
          replyto: formData.get('email')
        };

        console.log('Form data prepared:', {
          name: data.name,
          email: data.email,
          phone: data.phone,
          subject: data.subject,
          messageLength: data.message.length
        });

        console.log('Sending request to Web3Forms API...');

        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 15000);

        const response = await fetch('https://api.web3forms.com/submit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(data),
          signal: controller.signal
        });

        clearTimeout(timeoutId);

        console.log('Response received:', response.status, response.statusText);

        const result = await response.json();

        console.log('Response data:', result);

        if (result.success) {
          console.log('✓ SUCCESS - Form submitted successfully!');

          // Simple alert instead of notification
          showNotification('success', 'Başarıyla Gönderildi!', 'Mesajınız başarıyla alınmıştır. En kısa sürede size dönüş yapacağız.');

          contactForm.reset();
          console.log('Form reset completed');

          // Track successful submission
          if (typeof gtag !== 'undefined') {
            gtag('event', 'form_submit', {
              event_category: 'Contact',
              event_label: data.subject
            });
            console.log('Analytics event sent');
          }
        } else {
          console.error('✗ API returned success: false', result);
          throw new Error(result.message || 'Form gönderilemedi');
        }
      } catch (error) {
        console.error('✗ SUBMISSION ERROR:', error);
        console.error('Error name:', error.name);
        console.error('Error message:', error.message);
        console.error('Error stack:', error.stack);

        let errorMessage = 'Bir hata oluştu. Lütfen tekrar deneyin.';

        if (error.name === 'AbortError') {
          errorMessage = 'İstek zaman aşımına uğradı. İnternet bağlantınızı kontrol edip tekrar deneyin.';
        } else if (error.message.includes('fetch') || error.message.includes('network')) {
          errorMessage = 'Bağlantı hatası. İnternet bağlantınızı kontrol edin.';
        }

        showNotification('error', '✗ Gönderim Başarısız!', errorMessage + ' Alternatif olarak telefon veya e-posta ile iletişime geçebilirsiniz.');
      } finally {
        console.log('Cleaning up...');
        isSubmitting = false;
        setButtonLoading(submitBtn, false);
        formContainer.classList.remove('submitting');
        console.log('=== FORM SUBMIT ENDED ===');
      }
    });

    // Track form engagement
    let formEngaged = false;
    contactForm.addEventListener('focus', function() {
      if (!formEngaged) {
        formEngaged = true;
        console.log('📝 Form engaged');
        if (typeof gtag !== 'undefined') {
          gtag('event', 'form_start', {
            event_category: 'Contact',
            event_label: 'Contact Form'
          });
        }
      }
    }, true);

    console.log('✅ Form initialized successfully!');
  });
</script>
